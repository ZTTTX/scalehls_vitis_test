// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cemit_replaced_gemmBufferC_float_2u_2u_10u_Pipeline_VITIS_LOOP_93_1_VITIS_LOOP_94_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        l_sum3_dout,
        l_sum3_num_data_valid,
        l_sum3_fifo_cap,
        l_sum3_empty_n,
        l_sum3_read,
        l_bufferC_1_address0,
        l_bufferC_1_ce0,
        l_bufferC_1_we0,
        l_bufferC_1_d0,
        l_bufferC_address0,
        l_bufferC_ce0,
        l_bufferC_we0,
        l_bufferC_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] l_sum3_dout;
input  [1:0] l_sum3_num_data_valid;
input  [1:0] l_sum3_fifo_cap;
input   l_sum3_empty_n;
output   l_sum3_read;
output  [2:0] l_bufferC_1_address0;
output   l_bufferC_1_ce0;
output   l_bufferC_1_we0;
output  [31:0] l_bufferC_1_d0;
output  [2:0] l_bufferC_address0;
output   l_bufferC_ce0;
output   l_bufferC_we0;
output  [31:0] l_bufferC_d0;

reg ap_idle;
reg l_sum3_read;
reg l_bufferC_1_ce0;
reg l_bufferC_1_we0;
reg l_bufferC_ce0;
reg l_bufferC_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln93_fu_120_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    l_sum3_blk_n;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln99_fu_213_p1;
reg   [1:0] j_fu_58;
wire   [1:0] add_ln94_fu_219_p2;
reg    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
reg   [2:0] n_fu_62;
wire   [2:0] select_ln93_1_fu_163_p3;
reg   [3:0] indvar_flatten_fu_66;
wire   [3:0] add_ln93_1_fu_126_p2;
reg   [3:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln94_fu_149_p2;
wire   [2:0] add_ln93_fu_143_p2;
wire   [31:0] l_val_fu_171_p1;
wire   [31:0] l_val_9_fu_180_p4;
wire   [1:0] select_ln93_fu_155_p3;
wire   [0:0] empty_54_fu_195_p1;
wire   [2:0] tmp_1_fu_199_p3;
wire   [2:0] add_ln99_fu_207_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cemit_replaced_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln93_fu_120_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_66 <= add_ln93_1_fu_126_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_66 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_58 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            j_fu_58 <= add_ln94_fu_219_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            n_fu_62 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            n_fu_62 <= select_ln93_1_fu_163_p3;
        end
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 4'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_bufferC_1_ce0 = 1'b1;
    end else begin
        l_bufferC_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_bufferC_1_we0 = 1'b1;
    end else begin
        l_bufferC_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_bufferC_ce0 = 1'b1;
    end else begin
        l_bufferC_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_bufferC_we0 = 1'b1;
    end else begin
        l_bufferC_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_sum3_blk_n = l_sum3_empty_n;
    end else begin
        l_sum3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_sum3_read = 1'b1;
    end else begin
        l_sum3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln93_1_fu_126_p2 = (ap_sig_allocacmp_indvar_flatten_load + 4'd1);

assign add_ln93_fu_143_p2 = (n_fu_62 + 3'd1);

assign add_ln94_fu_219_p2 = (select_ln93_fu_155_p3 + 2'd1);

assign add_ln99_fu_207_p2 = (tmp_1_fu_199_p3 + select_ln93_1_fu_163_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((l_sum3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((l_sum3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (l_sum3_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_54_fu_195_p1 = select_ln93_fu_155_p3[0:0];

assign icmp_ln93_fu_120_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_149_p2 = ((j_fu_58 == 2'd2) ? 1'b1 : 1'b0);

assign l_bufferC_1_address0 = zext_ln99_fu_213_p1;

assign l_bufferC_1_d0 = l_val_9_fu_180_p4;

assign l_bufferC_address0 = zext_ln99_fu_213_p1;

assign l_bufferC_d0 = l_val_fu_171_p1;

assign l_val_9_fu_180_p4 = {{l_sum3_dout[63:32]}};

assign l_val_fu_171_p1 = l_sum3_dout[31:0];

assign select_ln93_1_fu_163_p3 = ((icmp_ln94_fu_149_p2[0:0] == 1'b1) ? add_ln93_fu_143_p2 : n_fu_62);

assign select_ln93_fu_155_p3 = ((icmp_ln94_fu_149_p2[0:0] == 1'b1) ? 2'd0 : j_fu_58);

assign tmp_1_fu_199_p3 = {{empty_54_fu_195_p1}, {select_ln93_fu_155_p3}};

assign zext_ln99_fu_213_p1 = add_ln99_fu_207_p2;

endmodule //cemit_replaced_gemmBufferC_float_2u_2u_10u_Pipeline_VITIS_LOOP_93_1_VITIS_LOOP_94_2
