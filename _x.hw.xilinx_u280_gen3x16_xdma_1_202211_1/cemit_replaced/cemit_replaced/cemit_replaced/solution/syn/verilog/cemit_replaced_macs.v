// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cemit_replaced_macs (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        l_dataA_0_dout,
        l_dataA_0_empty_n,
        l_dataA_0_read,
        l_dataB_0_dout,
        l_dataB_0_empty_n,
        l_dataB_0_read,
        l_dataB_1_din,
        l_dataB_1_full_n,
        l_dataB_1_write,
        l_sum_0_din,
        l_sum_0_full_n,
        l_sum_0_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [33:0] l_dataA_0_dout;
input   l_dataA_0_empty_n;
output   l_dataA_0_read;
input  [63:0] l_dataB_0_dout;
input   l_dataB_0_empty_n;
output   l_dataB_0_read;
output  [63:0] l_dataB_1_din;
input   l_dataB_1_full_n;
output   l_dataB_1_write;
output  [63:0] l_sum_0_din;
input   l_sum_0_full_n;
output   l_sum_0_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    muls_U0_ap_start;
wire    muls_U0_ap_done;
wire    muls_U0_ap_continue;
wire    muls_U0_ap_idle;
wire    muls_U0_ap_ready;
wire    muls_U0_start_out;
wire    muls_U0_start_write;
wire    muls_U0_l_dataA_0_read;
wire    muls_U0_l_dataB_0_read;
wire   [63:0] muls_U0_l_dataB_1_din;
wire    muls_U0_l_dataB_1_write;
wire   [63:0] muls_U0_l_mul1_din;
wire    muls_U0_l_mul1_write;
wire    ap_sync_continue;
wire    adds_U0_ap_start;
wire    adds_U0_ap_done;
wire    adds_U0_ap_continue;
wire    adds_U0_ap_idle;
wire    adds_U0_ap_ready;
wire    adds_U0_l_mul1_read;
wire   [63:0] adds_U0_l_sum_0_din;
wire    adds_U0_l_sum_0_write;
wire    l_mul_full_n;
wire   [63:0] l_mul_dout;
wire   [1:0] l_mul_num_data_valid;
wire   [1:0] l_mul_fifo_cap;
wire    l_mul_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_adds_U0_din;
wire    start_for_adds_U0_full_n;
wire   [0:0] start_for_adds_U0_dout;
wire    start_for_adds_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
end

cemit_replaced_muls muls_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(muls_U0_ap_start),
    .start_full_n(start_for_adds_U0_full_n),
    .ap_done(muls_U0_ap_done),
    .ap_continue(muls_U0_ap_continue),
    .ap_idle(muls_U0_ap_idle),
    .ap_ready(muls_U0_ap_ready),
    .start_out(muls_U0_start_out),
    .start_write(muls_U0_start_write),
    .l_dataA_0_dout(l_dataA_0_dout),
    .l_dataA_0_num_data_valid(3'd0),
    .l_dataA_0_fifo_cap(3'd0),
    .l_dataA_0_empty_n(l_dataA_0_empty_n),
    .l_dataA_0_read(muls_U0_l_dataA_0_read),
    .l_dataB_0_dout(l_dataB_0_dout),
    .l_dataB_0_num_data_valid(3'd0),
    .l_dataB_0_fifo_cap(3'd0),
    .l_dataB_0_empty_n(l_dataB_0_empty_n),
    .l_dataB_0_read(muls_U0_l_dataB_0_read),
    .l_dataB_1_din(muls_U0_l_dataB_1_din),
    .l_dataB_1_num_data_valid(2'd0),
    .l_dataB_1_fifo_cap(2'd0),
    .l_dataB_1_full_n(l_dataB_1_full_n),
    .l_dataB_1_write(muls_U0_l_dataB_1_write),
    .l_mul1_din(muls_U0_l_mul1_din),
    .l_mul1_num_data_valid(l_mul_num_data_valid),
    .l_mul1_fifo_cap(l_mul_fifo_cap),
    .l_mul1_full_n(l_mul_full_n),
    .l_mul1_write(muls_U0_l_mul1_write)
);

cemit_replaced_adds adds_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(adds_U0_ap_start),
    .ap_done(adds_U0_ap_done),
    .ap_continue(adds_U0_ap_continue),
    .ap_idle(adds_U0_ap_idle),
    .ap_ready(adds_U0_ap_ready),
    .l_mul1_dout(l_mul_dout),
    .l_mul1_num_data_valid(l_mul_num_data_valid),
    .l_mul1_fifo_cap(l_mul_fifo_cap),
    .l_mul1_empty_n(l_mul_empty_n),
    .l_mul1_read(adds_U0_l_mul1_read),
    .l_sum_0_din(adds_U0_l_sum_0_din),
    .l_sum_0_num_data_valid(2'd0),
    .l_sum_0_fifo_cap(2'd0),
    .l_sum_0_full_n(l_sum_0_full_n),
    .l_sum_0_write(adds_U0_l_sum_0_write)
);

cemit_replaced_fifo_w64_d2_S l_mul_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(muls_U0_l_mul1_din),
    .if_full_n(l_mul_full_n),
    .if_write(muls_U0_l_mul1_write),
    .if_dout(l_mul_dout),
    .if_num_data_valid(l_mul_num_data_valid),
    .if_fifo_cap(l_mul_fifo_cap),
    .if_empty_n(l_mul_empty_n),
    .if_read(adds_U0_l_mul1_read)
);

cemit_replaced_start_for_adds_U0 start_for_adds_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_adds_U0_din),
    .if_full_n(start_for_adds_U0_full_n),
    .if_write(muls_U0_start_write),
    .if_dout(start_for_adds_U0_dout),
    .if_empty_n(start_for_adds_U0_empty_n),
    .if_read(adds_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign adds_U0_ap_continue = ap_sync_continue;

assign adds_U0_ap_start = start_for_adds_U0_empty_n;

assign ap_done = ap_sync_done;

assign ap_idle = (muls_U0_ap_idle & adds_U0_ap_idle);

assign ap_ready = muls_U0_ap_ready;

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (muls_U0_ap_done & adds_U0_ap_done);

assign ap_sync_ready = muls_U0_ap_ready;

assign internal_ap_ready = ap_sync_ready;

assign l_dataA_0_read = muls_U0_l_dataA_0_read;

assign l_dataB_0_read = muls_U0_l_dataB_0_read;

assign l_dataB_1_din = muls_U0_l_dataB_1_din;

assign l_dataB_1_write = muls_U0_l_dataB_1_write;

assign l_sum_0_din = adds_U0_l_sum_0_din;

assign l_sum_0_write = adds_U0_l_sum_0_write;

assign muls_U0_ap_continue = ap_sync_continue;

assign muls_U0_ap_start = real_start;

assign start_for_adds_U0_din = 1'b1;

assign start_out = real_start;

endmodule //cemit_replaced_macs
