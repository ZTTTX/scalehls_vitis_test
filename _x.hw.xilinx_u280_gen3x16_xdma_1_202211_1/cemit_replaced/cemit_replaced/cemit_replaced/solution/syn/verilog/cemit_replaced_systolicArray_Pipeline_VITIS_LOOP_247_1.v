// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cemit_replaced_systolicArray_Pipeline_VITIS_LOOP_247_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        l_aStr1_dout,
        l_aStr1_num_data_valid,
        l_aStr1_fifo_cap,
        l_aStr1_empty_n,
        l_aStr1_read,
        l_bStr2_dout,
        l_bStr2_num_data_valid,
        l_bStr2_fifo_cap,
        l_bStr2_empty_n,
        l_bStr2_read,
        l_dataB_0_din,
        l_dataB_0_num_data_valid,
        l_dataB_0_fifo_cap,
        l_dataB_0_full_n,
        l_dataB_0_write,
        l_dataA_0_din,
        l_dataA_0_num_data_valid,
        l_dataA_0_fifo_cap,
        l_dataA_0_full_n,
        l_dataA_0_write,
        l_dataA_1_din,
        l_dataA_1_num_data_valid,
        l_dataA_1_fifo_cap,
        l_dataA_1_full_n,
        l_dataA_1_write,
        l_Tb_m_Sreg_Array_1_address0,
        l_Tb_m_Sreg_Array_1_ce0,
        l_Tb_m_Sreg_Array_1_we0,
        l_Tb_m_Sreg_Array_1_d0,
        l_Tb_m_Sreg_Array_1_q0,
        l_Tb_m_Sreg_Array_address0,
        l_Tb_m_Sreg_Array_ce0,
        l_Tb_m_Sreg_Array_we0,
        l_Tb_m_Sreg_Array_d0,
        l_Tb_m_Sreg_Array_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [65:0] l_aStr1_dout;
input  [1:0] l_aStr1_num_data_valid;
input  [1:0] l_aStr1_fifo_cap;
input   l_aStr1_empty_n;
output   l_aStr1_read;
input  [63:0] l_bStr2_dout;
input  [1:0] l_bStr2_num_data_valid;
input  [1:0] l_bStr2_fifo_cap;
input   l_bStr2_empty_n;
output   l_bStr2_read;
output  [63:0] l_dataB_0_din;
input  [2:0] l_dataB_0_num_data_valid;
input  [2:0] l_dataB_0_fifo_cap;
input   l_dataB_0_full_n;
output   l_dataB_0_write;
output  [33:0] l_dataA_0_din;
input  [2:0] l_dataA_0_num_data_valid;
input  [2:0] l_dataA_0_fifo_cap;
input   l_dataA_0_full_n;
output   l_dataA_0_write;
output  [33:0] l_dataA_1_din;
input  [2:0] l_dataA_1_num_data_valid;
input  [2:0] l_dataA_1_fifo_cap;
input   l_dataA_1_full_n;
output   l_dataA_1_write;
output  [0:0] l_Tb_m_Sreg_Array_1_address0;
output   l_Tb_m_Sreg_Array_1_ce0;
output   l_Tb_m_Sreg_Array_1_we0;
output  [31:0] l_Tb_m_Sreg_Array_1_d0;
input  [31:0] l_Tb_m_Sreg_Array_1_q0;
output  [0:0] l_Tb_m_Sreg_Array_address0;
output   l_Tb_m_Sreg_Array_ce0;
output   l_Tb_m_Sreg_Array_we0;
output  [31:0] l_Tb_m_Sreg_Array_d0;
input  [31:0] l_Tb_m_Sreg_Array_q0;

reg ap_idle;
reg l_aStr1_read;
reg l_bStr2_read;
reg l_dataB_0_write;
reg l_dataA_0_write;
reg l_dataA_1_write;
reg l_Tb_m_Sreg_Array_1_ce0;
reg l_Tb_m_Sreg_Array_1_we0;
reg l_Tb_m_Sreg_Array_ce0;
reg l_Tb_m_Sreg_Array_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] p_Result_1_fu_132_p1;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    l_aStr1_blk_n;
wire    ap_block_pp0_stage0;
reg    l_bStr2_blk_n;
reg    l_dataB_0_blk_n;
reg    l_dataA_0_blk_n;
reg    l_dataA_1_blk_n;
reg   [0:0] p_Repl2_s_reg_121;
reg   [0:0] p_Result_1_reg_239;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] l_val_reg_245;
reg   [31:0] l_val_5_reg_250;
reg   [0:0] p_Result_s_reg_255;
wire   [31:0] l_val_3_fu_164_p1;
reg   [31:0] l_val_3_reg_260;
reg   [31:0] l_val_4_reg_265;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln110_fu_178_p1;
wire   [31:0] bitcast_ln110_2_fu_181_p1;
wire   [31:0] l_val_V_1_fu_208_p1;
wire   [31:0] l_val_V_fu_204_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_247;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cemit_replaced_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_247)) begin
            p_Repl2_s_reg_121 <= p_Result_s_reg_255;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            p_Repl2_s_reg_121 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_val_3_reg_260 <= l_val_3_fu_164_p1;
        l_val_4_reg_265 <= {{l_bStr2_dout[63:32]}};
        l_val_5_reg_250 <= {{l_aStr1_dout[65:34]}};
        l_val_reg_245 <= {{l_aStr1_dout[33:2]}};
        p_Result_1_reg_239 <= p_Result_1_fu_132_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_s_reg_255 <= l_aStr1_dout[32'd1];
    end
end

always @ (*) begin
    if (((p_Result_1_fu_132_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_Tb_m_Sreg_Array_1_ce0 = 1'd1;
    end else begin
        l_Tb_m_Sreg_Array_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_Tb_m_Sreg_Array_1_we0 = 1'd1;
    end else begin
        l_Tb_m_Sreg_Array_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_Tb_m_Sreg_Array_ce0 = 1'd1;
    end else begin
        l_Tb_m_Sreg_Array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_Tb_m_Sreg_Array_we0 = 1'd1;
    end else begin
        l_Tb_m_Sreg_Array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_aStr1_blk_n = l_aStr1_empty_n;
    end else begin
        l_aStr1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_aStr1_read = 1'b1;
    end else begin
        l_aStr1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_bStr2_blk_n = l_bStr2_empty_n;
    end else begin
        l_bStr2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_bStr2_read = 1'b1;
    end else begin
        l_bStr2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_dataA_0_blk_n = l_dataA_0_full_n;
    end else begin
        l_dataA_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_dataA_0_write = 1'b1;
    end else begin
        l_dataA_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_dataA_1_blk_n = l_dataA_1_full_n;
    end else begin
        l_dataA_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_dataA_1_write = 1'b1;
    end else begin
        l_dataA_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_dataB_0_blk_n = l_dataB_0_full_n;
    end else begin
        l_dataB_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_dataB_0_write = 1'b1;
    end else begin
        l_dataB_0_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((l_dataA_1_full_n == 1'b0) | (l_dataA_0_full_n == 1'b0) | (l_dataB_0_full_n == 1'b0))) | ((ap_start_int == 1'b1) & ((l_bStr2_empty_n == 1'b0) | (l_aStr1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((l_dataA_1_full_n == 1'b0) | (l_dataA_0_full_n == 1'b0) | (l_dataB_0_full_n == 1'b0))) | ((ap_start_int == 1'b1) & ((l_bStr2_empty_n == 1'b0) | (l_aStr1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((l_dataA_1_full_n == 1'b0) | (l_dataA_0_full_n == 1'b0) | (l_dataB_0_full_n == 1'b0))) | ((ap_start_int == 1'b1) & ((l_bStr2_empty_n == 1'b0) | (l_aStr1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((l_bStr2_empty_n == 1'b0) | (l_aStr1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((l_dataA_1_full_n == 1'b0) | (l_dataA_0_full_n == 1'b0) | (l_dataB_0_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_247 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (p_Result_1_reg_239 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln110_2_fu_181_p1 = l_val_4_reg_265;

assign bitcast_ln110_fu_178_p1 = l_val_3_reg_260;

assign l_Tb_m_Sreg_Array_1_address0 = 64'd1;

assign l_Tb_m_Sreg_Array_1_d0 = bitcast_ln110_2_fu_181_p1;

assign l_Tb_m_Sreg_Array_address0 = 64'd0;

assign l_Tb_m_Sreg_Array_d0 = bitcast_ln110_fu_178_p1;

assign l_dataA_0_din = {{{l_val_reg_245}, {p_Repl2_s_reg_121}}, {p_Result_1_reg_239}};

assign l_dataA_1_din = {{{l_val_5_reg_250}, {p_Repl2_s_reg_121}}, {p_Result_1_reg_239}};

assign l_dataB_0_din = {{l_val_V_1_fu_208_p1}, {l_val_V_fu_204_p1}};

assign l_val_3_fu_164_p1 = l_bStr2_dout[31:0];

assign l_val_V_1_fu_208_p1 = l_Tb_m_Sreg_Array_1_q0;

assign l_val_V_fu_204_p1 = l_Tb_m_Sreg_Array_q0;

assign p_Result_1_fu_132_p1 = l_aStr1_dout[0:0];

endmodule //cemit_replaced_systolicArray_Pipeline_VITIS_LOOP_247_1
