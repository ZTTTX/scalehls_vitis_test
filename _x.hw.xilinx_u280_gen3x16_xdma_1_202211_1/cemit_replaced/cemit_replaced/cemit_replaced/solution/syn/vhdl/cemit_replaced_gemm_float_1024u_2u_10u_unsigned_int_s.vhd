-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cemit_replaced_gemm_float_1024u_2u_10u_unsigned_int_s is
port (
    l_strA4_i_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    l_strA4_i_empty_n : IN STD_LOGIC;
    l_strA4_i_read : OUT STD_LOGIC;
    l_strB5_i_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    l_strB5_i_empty_n : IN STD_LOGIC;
    l_strB5_i_read : OUT STD_LOGIC;
    l_strC6_i_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    l_strC6_i_empty_n : IN STD_LOGIC;
    l_strC6_i_read : OUT STD_LOGIC;
    l_strSum7_i_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    l_strSum7_i_full_n : IN STD_LOGIC;
    l_strSum7_i_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of cemit_replaced_gemm_float_1024u_2u_10u_unsigned_int_s is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal gemm_U0_ap_start : STD_LOGIC;
    signal gemm_U0_start_out : STD_LOGIC;
    signal gemm_U0_start_write : STD_LOGIC;
    signal gemm_U0_l_strA4_i_read : STD_LOGIC;
    signal gemm_U0_l_strB5_i_read : STD_LOGIC;
    signal gemm_U0_l_sum3_din : STD_LOGIC_VECTOR (63 downto 0);
    signal gemm_U0_l_sum3_write : STD_LOGIC;
    signal gemm_U0_ap_done : STD_LOGIC;
    signal gemm_U0_ap_ready : STD_LOGIC;
    signal gemm_U0_ap_idle : STD_LOGIC;
    signal gemm_U0_ap_continue : STD_LOGIC;
    signal gemmBufferC_float_2u_2u_10u_U0_ap_start : STD_LOGIC;
    signal gemmBufferC_float_2u_2u_10u_U0_ap_done : STD_LOGIC;
    signal gemmBufferC_float_2u_2u_10u_U0_ap_continue : STD_LOGIC;
    signal gemmBufferC_float_2u_2u_10u_U0_ap_idle : STD_LOGIC;
    signal gemmBufferC_float_2u_2u_10u_U0_ap_ready : STD_LOGIC;
    signal gemmBufferC_float_2u_2u_10u_U0_l_sum3_read : STD_LOGIC;
    signal gemmBufferC_float_2u_2u_10u_U0_l_mat4_din : STD_LOGIC_VECTOR (63 downto 0);
    signal gemmBufferC_float_2u_2u_10u_U0_l_mat4_write : STD_LOGIC;
    signal scal_float_2u_unsigned_int_U0_ap_start : STD_LOGIC;
    signal scal_float_2u_unsigned_int_U0_ap_done : STD_LOGIC;
    signal scal_float_2u_unsigned_int_U0_ap_continue : STD_LOGIC;
    signal scal_float_2u_unsigned_int_U0_ap_idle : STD_LOGIC;
    signal scal_float_2u_unsigned_int_U0_ap_ready : STD_LOGIC;
    signal scal_float_2u_unsigned_int_U0_l_strC6_i_read : STD_LOGIC;
    signal scal_float_2u_unsigned_int_U0_l_betaC5_din : STD_LOGIC_VECTOR (63 downto 0);
    signal scal_float_2u_unsigned_int_U0_l_betaC5_write : STD_LOGIC;
    signal scal_float_2u_unsigned_int_U0_start_out : STD_LOGIC;
    signal scal_float_2u_unsigned_int_U0_start_write : STD_LOGIC;
    signal axpy_float_2u_unsigned_int_U0_ap_start : STD_LOGIC;
    signal axpy_float_2u_unsigned_int_U0_ap_done : STD_LOGIC;
    signal axpy_float_2u_unsigned_int_U0_ap_continue : STD_LOGIC;
    signal axpy_float_2u_unsigned_int_U0_ap_idle : STD_LOGIC;
    signal axpy_float_2u_unsigned_int_U0_ap_ready : STD_LOGIC;
    signal axpy_float_2u_unsigned_int_U0_l_mat4_read : STD_LOGIC;
    signal axpy_float_2u_unsigned_int_U0_l_betaC5_read : STD_LOGIC;
    signal axpy_float_2u_unsigned_int_U0_l_strSum7_i_din : STD_LOGIC_VECTOR (63 downto 0);
    signal axpy_float_2u_unsigned_int_U0_l_strSum7_i_write : STD_LOGIC;
    signal l_sum_full_n : STD_LOGIC;
    signal l_sum_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal l_sum_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal l_sum_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal l_sum_empty_n : STD_LOGIC;
    signal l_mat_full_n : STD_LOGIC;
    signal l_mat_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal l_mat_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal l_mat_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal l_mat_empty_n : STD_LOGIC;
    signal l_betaC_full_n : STD_LOGIC;
    signal l_betaC_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal l_betaC_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal l_betaC_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal l_betaC_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_gemm_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_gemm_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_scal_float_2u_unsigned_int_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_scal_float_2u_unsigned_int_U0_ap_ready : STD_LOGIC;
    signal start_for_gemmBufferC_float_2u_2u_10u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gemmBufferC_float_2u_2u_10u_U0_full_n : STD_LOGIC;
    signal start_for_gemmBufferC_float_2u_2u_10u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gemmBufferC_float_2u_2u_10u_U0_empty_n : STD_LOGIC;
    signal start_for_axpy_float_2u_unsigned_int_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_axpy_float_2u_unsigned_int_U0_full_n : STD_LOGIC;
    signal start_for_axpy_float_2u_unsigned_int_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_axpy_float_2u_unsigned_int_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cemit_replaced_gemm IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        l_strA4_i_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        l_strA4_i_empty_n : IN STD_LOGIC;
        l_strA4_i_read : OUT STD_LOGIC;
        l_strB5_i_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        l_strB5_i_empty_n : IN STD_LOGIC;
        l_strB5_i_read : OUT STD_LOGIC;
        l_sum3_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        l_sum3_full_n : IN STD_LOGIC;
        l_sum3_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component cemit_replaced_gemmBufferC_float_2u_2u_10u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        l_sum3_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        l_sum3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        l_sum3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        l_sum3_empty_n : IN STD_LOGIC;
        l_sum3_read : OUT STD_LOGIC;
        l_mat4_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        l_mat4_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        l_mat4_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        l_mat4_full_n : IN STD_LOGIC;
        l_mat4_write : OUT STD_LOGIC );
    end component;


    component cemit_replaced_scal_float_2u_unsigned_int_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        l_strC6_i_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        l_strC6_i_empty_n : IN STD_LOGIC;
        l_strC6_i_read : OUT STD_LOGIC;
        l_betaC5_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        l_betaC5_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        l_betaC5_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        l_betaC5_full_n : IN STD_LOGIC;
        l_betaC5_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component cemit_replaced_axpy_float_2u_unsigned_int_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        l_mat4_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        l_mat4_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        l_mat4_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        l_mat4_empty_n : IN STD_LOGIC;
        l_mat4_read : OUT STD_LOGIC;
        l_betaC5_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        l_betaC5_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        l_betaC5_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        l_betaC5_empty_n : IN STD_LOGIC;
        l_betaC5_read : OUT STD_LOGIC;
        l_strSum7_i_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        l_strSum7_i_full_n : IN STD_LOGIC;
        l_strSum7_i_write : OUT STD_LOGIC );
    end component;


    component cemit_replaced_fifo_w64_d2_S_x1 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cemit_replaced_start_for_gemmBufferC_float_2u_2u_10u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cemit_replaced_start_for_axpy_float_2u_unsigned_int_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    gemm_U0 : component cemit_replaced_gemm
    port map (
        ap_start => gemm_U0_ap_start,
        start_full_n => start_for_gemmBufferC_float_2u_2u_10u_U0_full_n,
        start_out => gemm_U0_start_out,
        start_write => gemm_U0_start_write,
        l_strA4_i_dout => l_strA4_i_dout,
        l_strA4_i_empty_n => l_strA4_i_empty_n,
        l_strA4_i_read => gemm_U0_l_strA4_i_read,
        l_strB5_i_dout => l_strB5_i_dout,
        l_strB5_i_empty_n => l_strB5_i_empty_n,
        l_strB5_i_read => gemm_U0_l_strB5_i_read,
        l_sum3_din => gemm_U0_l_sum3_din,
        l_sum3_full_n => l_sum_full_n,
        l_sum3_write => gemm_U0_l_sum3_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_done => gemm_U0_ap_done,
        ap_ready => gemm_U0_ap_ready,
        ap_idle => gemm_U0_ap_idle,
        ap_continue => gemm_U0_ap_continue);

    gemmBufferC_float_2u_2u_10u_U0 : component cemit_replaced_gemmBufferC_float_2u_2u_10u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => gemmBufferC_float_2u_2u_10u_U0_ap_start,
        ap_done => gemmBufferC_float_2u_2u_10u_U0_ap_done,
        ap_continue => gemmBufferC_float_2u_2u_10u_U0_ap_continue,
        ap_idle => gemmBufferC_float_2u_2u_10u_U0_ap_idle,
        ap_ready => gemmBufferC_float_2u_2u_10u_U0_ap_ready,
        l_sum3_dout => l_sum_dout,
        l_sum3_num_data_valid => l_sum_num_data_valid,
        l_sum3_fifo_cap => l_sum_fifo_cap,
        l_sum3_empty_n => l_sum_empty_n,
        l_sum3_read => gemmBufferC_float_2u_2u_10u_U0_l_sum3_read,
        l_mat4_din => gemmBufferC_float_2u_2u_10u_U0_l_mat4_din,
        l_mat4_num_data_valid => l_mat_num_data_valid,
        l_mat4_fifo_cap => l_mat_fifo_cap,
        l_mat4_full_n => l_mat_full_n,
        l_mat4_write => gemmBufferC_float_2u_2u_10u_U0_l_mat4_write);

    scal_float_2u_unsigned_int_U0 : component cemit_replaced_scal_float_2u_unsigned_int_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => scal_float_2u_unsigned_int_U0_ap_start,
        start_full_n => start_for_axpy_float_2u_unsigned_int_U0_full_n,
        ap_done => scal_float_2u_unsigned_int_U0_ap_done,
        ap_continue => scal_float_2u_unsigned_int_U0_ap_continue,
        ap_idle => scal_float_2u_unsigned_int_U0_ap_idle,
        ap_ready => scal_float_2u_unsigned_int_U0_ap_ready,
        l_strC6_i_dout => l_strC6_i_dout,
        l_strC6_i_empty_n => l_strC6_i_empty_n,
        l_strC6_i_read => scal_float_2u_unsigned_int_U0_l_strC6_i_read,
        l_betaC5_din => scal_float_2u_unsigned_int_U0_l_betaC5_din,
        l_betaC5_num_data_valid => l_betaC_num_data_valid,
        l_betaC5_fifo_cap => l_betaC_fifo_cap,
        l_betaC5_full_n => l_betaC_full_n,
        l_betaC5_write => scal_float_2u_unsigned_int_U0_l_betaC5_write,
        start_out => scal_float_2u_unsigned_int_U0_start_out,
        start_write => scal_float_2u_unsigned_int_U0_start_write);

    axpy_float_2u_unsigned_int_U0 : component cemit_replaced_axpy_float_2u_unsigned_int_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => axpy_float_2u_unsigned_int_U0_ap_start,
        ap_done => axpy_float_2u_unsigned_int_U0_ap_done,
        ap_continue => axpy_float_2u_unsigned_int_U0_ap_continue,
        ap_idle => axpy_float_2u_unsigned_int_U0_ap_idle,
        ap_ready => axpy_float_2u_unsigned_int_U0_ap_ready,
        l_mat4_dout => l_mat_dout,
        l_mat4_num_data_valid => l_mat_num_data_valid,
        l_mat4_fifo_cap => l_mat_fifo_cap,
        l_mat4_empty_n => l_mat_empty_n,
        l_mat4_read => axpy_float_2u_unsigned_int_U0_l_mat4_read,
        l_betaC5_dout => l_betaC_dout,
        l_betaC5_num_data_valid => l_betaC_num_data_valid,
        l_betaC5_fifo_cap => l_betaC_fifo_cap,
        l_betaC5_empty_n => l_betaC_empty_n,
        l_betaC5_read => axpy_float_2u_unsigned_int_U0_l_betaC5_read,
        l_strSum7_i_din => axpy_float_2u_unsigned_int_U0_l_strSum7_i_din,
        l_strSum7_i_full_n => l_strSum7_i_full_n,
        l_strSum7_i_write => axpy_float_2u_unsigned_int_U0_l_strSum7_i_write);

    l_sum_U : component cemit_replaced_fifo_w64_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gemm_U0_l_sum3_din,
        if_full_n => l_sum_full_n,
        if_write => gemm_U0_l_sum3_write,
        if_dout => l_sum_dout,
        if_num_data_valid => l_sum_num_data_valid,
        if_fifo_cap => l_sum_fifo_cap,
        if_empty_n => l_sum_empty_n,
        if_read => gemmBufferC_float_2u_2u_10u_U0_l_sum3_read);

    l_mat_U : component cemit_replaced_fifo_w64_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gemmBufferC_float_2u_2u_10u_U0_l_mat4_din,
        if_full_n => l_mat_full_n,
        if_write => gemmBufferC_float_2u_2u_10u_U0_l_mat4_write,
        if_dout => l_mat_dout,
        if_num_data_valid => l_mat_num_data_valid,
        if_fifo_cap => l_mat_fifo_cap,
        if_empty_n => l_mat_empty_n,
        if_read => axpy_float_2u_unsigned_int_U0_l_mat4_read);

    l_betaC_U : component cemit_replaced_fifo_w64_d2_S_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => scal_float_2u_unsigned_int_U0_l_betaC5_din,
        if_full_n => l_betaC_full_n,
        if_write => scal_float_2u_unsigned_int_U0_l_betaC5_write,
        if_dout => l_betaC_dout,
        if_num_data_valid => l_betaC_num_data_valid,
        if_fifo_cap => l_betaC_fifo_cap,
        if_empty_n => l_betaC_empty_n,
        if_read => axpy_float_2u_unsigned_int_U0_l_betaC5_read);

    start_for_gemmBufferC_float_2u_2u_10u_U0_U : component cemit_replaced_start_for_gemmBufferC_float_2u_2u_10u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gemmBufferC_float_2u_2u_10u_U0_din,
        if_full_n => start_for_gemmBufferC_float_2u_2u_10u_U0_full_n,
        if_write => gemm_U0_start_write,
        if_dout => start_for_gemmBufferC_float_2u_2u_10u_U0_dout,
        if_empty_n => start_for_gemmBufferC_float_2u_2u_10u_U0_empty_n,
        if_read => gemmBufferC_float_2u_2u_10u_U0_ap_ready);

    start_for_axpy_float_2u_unsigned_int_U0_U : component cemit_replaced_start_for_axpy_float_2u_unsigned_int_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_axpy_float_2u_unsigned_int_U0_din,
        if_full_n => start_for_axpy_float_2u_unsigned_int_U0_full_n,
        if_write => scal_float_2u_unsigned_int_U0_start_write,
        if_dout => start_for_axpy_float_2u_unsigned_int_U0_dout,
        if_empty_n => start_for_axpy_float_2u_unsigned_int_U0_empty_n,
        if_read => axpy_float_2u_unsigned_int_U0_ap_ready);





    ap_sync_reg_gemm_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_gemm_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_gemm_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_gemm_U0_ap_ready <= ap_sync_gemm_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_scal_float_2u_unsigned_int_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_scal_float_2u_unsigned_int_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_scal_float_2u_unsigned_int_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_scal_float_2u_unsigned_int_U0_ap_ready <= ap_sync_scal_float_2u_unsigned_int_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= axpy_float_2u_unsigned_int_U0_ap_done;
    ap_idle <= (scal_float_2u_unsigned_int_U0_ap_idle and gemm_U0_ap_idle and gemmBufferC_float_2u_2u_10u_U0_ap_idle and axpy_float_2u_unsigned_int_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_gemm_U0_ap_ready <= (gemm_U0_ap_ready or ap_sync_reg_gemm_U0_ap_ready);
    ap_sync_ready <= (ap_sync_scal_float_2u_unsigned_int_U0_ap_ready and ap_sync_gemm_U0_ap_ready);
    ap_sync_scal_float_2u_unsigned_int_U0_ap_ready <= (scal_float_2u_unsigned_int_U0_ap_ready or ap_sync_reg_scal_float_2u_unsigned_int_U0_ap_ready);
    axpy_float_2u_unsigned_int_U0_ap_continue <= ap_continue;
    axpy_float_2u_unsigned_int_U0_ap_start <= start_for_axpy_float_2u_unsigned_int_U0_empty_n;
    gemmBufferC_float_2u_2u_10u_U0_ap_continue <= ap_const_logic_1;
    gemmBufferC_float_2u_2u_10u_U0_ap_start <= start_for_gemmBufferC_float_2u_2u_10u_U0_empty_n;
    gemm_U0_ap_continue <= ap_const_logic_1;
    gemm_U0_ap_start <= ((ap_sync_reg_gemm_U0_ap_ready xor ap_const_logic_1) and ap_start);
    l_strA4_i_read <= gemm_U0_l_strA4_i_read;
    l_strB5_i_read <= gemm_U0_l_strB5_i_read;
    l_strC6_i_read <= scal_float_2u_unsigned_int_U0_l_strC6_i_read;
    l_strSum7_i_din <= axpy_float_2u_unsigned_int_U0_l_strSum7_i_din;
    l_strSum7_i_write <= axpy_float_2u_unsigned_int_U0_l_strSum7_i_write;
    scal_float_2u_unsigned_int_U0_ap_continue <= ap_const_logic_1;
    scal_float_2u_unsigned_int_U0_ap_start <= ((ap_sync_reg_scal_float_2u_unsigned_int_U0_ap_ready xor ap_const_logic_1) and ap_start);
    start_for_axpy_float_2u_unsigned_int_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gemmBufferC_float_2u_2u_10u_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
