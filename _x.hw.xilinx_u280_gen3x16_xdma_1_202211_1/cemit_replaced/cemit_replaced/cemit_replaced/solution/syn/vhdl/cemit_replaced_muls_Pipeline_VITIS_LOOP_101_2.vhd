-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cemit_replaced_muls_Pipeline_VITIS_LOOP_101_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    l_dataA_0_dout : IN STD_LOGIC_VECTOR (33 downto 0);
    l_dataA_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    l_dataA_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    l_dataA_0_empty_n : IN STD_LOGIC;
    l_dataA_0_read : OUT STD_LOGIC;
    l_dataB_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    l_dataB_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    l_dataB_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    l_dataB_0_empty_n : IN STD_LOGIC;
    l_dataB_0_read : OUT STD_LOGIC;
    l_dataB_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    l_dataB_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    l_dataB_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    l_dataB_1_full_n : IN STD_LOGIC;
    l_dataB_1_write : OUT STD_LOGIC;
    l_mul1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    l_mul1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    l_mul1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    l_mul1_full_n : IN STD_LOGIC;
    l_mul1_write : OUT STD_LOGIC;
    l_Tc_m_Sreg_Array_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    l_Tc_m_Sreg_Array_2_ce0 : OUT STD_LOGIC;
    l_Tc_m_Sreg_Array_2_we0 : OUT STD_LOGIC;
    l_Tc_m_Sreg_Array_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    l_Tc_m_Sreg_Array_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    l_Tc_m_Sreg_Array_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    l_Tc_m_Sreg_Array_ce0 : OUT STD_LOGIC;
    l_Tc_m_Sreg_Array_we0 : OUT STD_LOGIC;
    l_Tc_m_Sreg_Array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    l_Tc_m_Sreg_Array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    l_flush_Array_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    l_flush_Array_ce0 : OUT STD_LOGIC;
    l_flush_Array_we0 : OUT STD_LOGIC;
    l_flush_Array_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    l_flush_Array_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of cemit_replaced_muls_Pipeline_VITIS_LOOP_101_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal icmp_ln130_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal trunc_ln628_fu_162_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal l_dataA_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal l_dataB_0_blk_n : STD_LOGIC;
    signal l_dataB_1_blk_n : STD_LOGIC;
    signal l_mul1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln628_reg_336 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_345 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_345_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_345_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_345_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal l_val_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_7_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_5_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataIn_assign_4_reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln130_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_outCount_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_outCount_2_fu_239_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_outCount_3_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal empty_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_aVal_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_c_m_val_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_247_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal l_val_V_7_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_6_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_139_ce : STD_LOGIC;
    signal grp_fu_143_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cemit_replaced_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cemit_replaced_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fmul_32ns_32ns_32_4_max_dsp_1_U30 : component cemit_replaced_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_aVal_fu_84,
        din1 => grp_fu_139_p1,
        ce => grp_fu_139_ce,
        dout => grp_fu_139_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U31 : component cemit_replaced_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_fu_80,
        din1 => grp_fu_143_p1,
        ce => grp_fu_143_ce,
        dout => grp_fu_143_p2);

    flow_control_loop_pipe_sequential_init_U : component cemit_replaced_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    empty_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_80 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln628_reg_336 = ap_const_lv1_0))) then 
                    empty_fu_80 <= l_aVal_fu_84;
                end if;
            end if; 
        end if;
    end process;

    l_aVal_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    l_aVal_fu_84 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln628_reg_336 = ap_const_lv1_0))) then 
                    l_aVal_fu_84 <= l_c_m_val_fu_206_p1;
                end if;
            end if; 
        end if;
    end process;

    l_outCount_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    l_outCount_fu_76 <= ap_const_lv32_400;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln130_fu_257_p2 = ap_const_lv1_1))) then 
                    l_outCount_fu_76 <= l_outCount_3_fu_268_p2;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln130_fu_257_p2 = ap_const_lv1_0))) then 
                    l_outCount_fu_76 <= l_outCount_2_fu_239_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                DataIn_assign_4_reg_385 <= grp_fu_143_p2;
                DataIn_assign_5_reg_380 <= grp_fu_139_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                icmp_ln130_reg_390 <= icmp_ln130_fu_257_p2;
                p_Result_s_reg_345_pp0_iter2_reg <= p_Result_s_reg_345_pp0_iter1_reg;
                p_Result_s_reg_345_pp0_iter3_reg <= p_Result_s_reg_345_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                l_val_7_reg_355 <= l_dataB_0_dout(63 downto 32);
                l_val_reg_350 <= l_val_fu_184_p1;
                p_Result_s_reg_345 <= l_dataA_0_dout(1 downto 1);
                p_Result_s_reg_345_pp0_iter1_reg <= p_Result_s_reg_345;
                tmp5_reg_340 <= l_dataA_0_dout(33 downto 2);
                trunc_ln628_reg_336 <= trunc_ln628_fu_162_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter5, l_dataA_0_empty_n, l_dataB_0_empty_n, l_dataB_1_full_n, l_mul1_full_n, icmp_ln130_reg_390, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln130_reg_390 = ap_const_lv1_1) and (l_mul1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((l_dataB_1_full_n = ap_const_logic_0) or (l_dataB_0_empty_n = ap_const_logic_0) or (l_dataA_0_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, l_dataA_0_empty_n, l_dataB_0_empty_n, l_dataB_1_full_n, l_mul1_full_n, icmp_ln130_reg_390, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln130_reg_390 = ap_const_lv1_1) and (l_mul1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((l_dataB_1_full_n = ap_const_logic_0) or (l_dataB_0_empty_n = ap_const_logic_0) or (l_dataA_0_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, l_dataA_0_empty_n, l_dataB_0_empty_n, l_dataB_1_full_n, l_mul1_full_n, icmp_ln130_reg_390, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln130_reg_390 = ap_const_lv1_1) and (l_mul1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((l_dataB_1_full_n = ap_const_logic_0) or (l_dataB_0_empty_n = ap_const_logic_0) or (l_dataA_0_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(l_dataA_0_empty_n, l_dataB_0_empty_n, l_dataB_1_full_n)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((l_dataB_1_full_n = ap_const_logic_0) or (l_dataB_0_empty_n = ap_const_logic_0) or (l_dataA_0_empty_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter5_assign_proc : process(l_mul1_full_n, icmp_ln130_reg_390)
    begin
                ap_block_state6_pp0_stage0_iter5 <= ((icmp_ln130_reg_390 = ap_const_lv1_1) and (l_mul1_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, trunc_ln628_fu_162_p1, ap_start_int)
    begin
        if (((trunc_ln628_fu_162_p1 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_139_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_139_ce <= ap_const_logic_1;
        else 
            grp_fu_139_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_139_p1 <= l_val_reg_350;

    grp_fu_143_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_143_ce <= ap_const_logic_1;
        else 
            grp_fu_143_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_143_p1 <= l_val_7_reg_355;
    icmp_ln130_fu_257_p2 <= "1" when (tmp_fu_247_p4 = ap_const_lv22_0) else "0";
    l_Tc_m_Sreg_Array_2_address0 <= ap_const_lv64_1(1 - 1 downto 0);

    l_Tc_m_Sreg_Array_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            l_Tc_m_Sreg_Array_2_ce0 <= ap_const_logic_1;
        else 
            l_Tc_m_Sreg_Array_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l_Tc_m_Sreg_Array_2_d0 <= DataIn_assign_5_reg_380;

    l_Tc_m_Sreg_Array_2_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            l_Tc_m_Sreg_Array_2_we0 <= ap_const_logic_1;
        else 
            l_Tc_m_Sreg_Array_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    l_Tc_m_Sreg_Array_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    l_Tc_m_Sreg_Array_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            l_Tc_m_Sreg_Array_ce0 <= ap_const_logic_1;
        else 
            l_Tc_m_Sreg_Array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l_Tc_m_Sreg_Array_d0 <= DataIn_assign_4_reg_385;

    l_Tc_m_Sreg_Array_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            l_Tc_m_Sreg_Array_we0 <= ap_const_logic_1;
        else 
            l_Tc_m_Sreg_Array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    l_c_m_val_fu_206_p1 <= tmp5_reg_340;

    l_dataA_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, l_dataA_0_empty_n, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_dataA_0_blk_n <= l_dataA_0_empty_n;
        else 
            l_dataA_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    l_dataA_0_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_dataA_0_read <= ap_const_logic_1;
        else 
            l_dataA_0_read <= ap_const_logic_0;
        end if; 
    end process;


    l_dataB_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, l_dataB_0_empty_n, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_dataB_0_blk_n <= l_dataB_0_empty_n;
        else 
            l_dataB_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    l_dataB_0_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_dataB_0_read <= ap_const_logic_1;
        else 
            l_dataB_0_read <= ap_const_logic_0;
        end if; 
    end process;


    l_dataB_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, l_dataB_1_full_n, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_dataB_1_blk_n <= l_dataB_1_full_n;
        else 
            l_dataB_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l_dataB_1_din <= l_dataB_0_dout;

    l_dataB_1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_dataB_1_write <= ap_const_logic_1;
        else 
            l_dataB_1_write <= ap_const_logic_0;
        end if; 
    end process;

    l_flush_Array_address0 <= ap_const_lv64_1(1 - 1 downto 0);

    l_flush_Array_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            l_flush_Array_ce0 <= ap_const_logic_1;
        else 
            l_flush_Array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l_flush_Array_d0 <= p_Result_s_reg_345_pp0_iter3_reg;

    l_flush_Array_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            l_flush_Array_we0 <= ap_const_logic_1;
        else 
            l_flush_Array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l_mul1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, l_mul1_full_n, icmp_ln130_reg_390, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln130_reg_390 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            l_mul1_blk_n <= l_mul1_full_n;
        else 
            l_mul1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l_mul1_din <= (l_val_V_7_fu_301_p1 & l_val_V_6_fu_297_p1);

    l_mul1_write_assign_proc : process(ap_enable_reg_pp0_iter5, icmp_ln130_reg_390, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln130_reg_390 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            l_mul1_write <= ap_const_logic_1;
        else 
            l_mul1_write <= ap_const_logic_0;
        end if; 
    end process;

    l_outCount_2_fu_239_p3 <= 
        ap_const_lv32_0 when (l_flush_Array_q0(0) = '1') else 
        l_outCount_fu_76;
    l_outCount_3_fu_268_p2 <= std_logic_vector(unsigned(l_outCount_2_fu_239_p3) + unsigned(ap_const_lv32_1));
    l_val_V_6_fu_297_p1 <= l_Tc_m_Sreg_Array_2_q0;
    l_val_V_7_fu_301_p1 <= l_Tc_m_Sreg_Array_q0;
    l_val_fu_184_p1 <= l_dataB_0_dout(32 - 1 downto 0);
    tmp_fu_247_p4 <= l_outCount_2_fu_239_p3(31 downto 10);
    trunc_ln628_fu_162_p1 <= l_dataA_0_dout(1 - 1 downto 0);
end behav;
