-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cemit_replaced_systolicArray_Pipeline_VITIS_LOOP_247_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    l_aStr1_dout : IN STD_LOGIC_VECTOR (65 downto 0);
    l_aStr1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    l_aStr1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    l_aStr1_empty_n : IN STD_LOGIC;
    l_aStr1_read : OUT STD_LOGIC;
    l_bStr2_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    l_bStr2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    l_bStr2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    l_bStr2_empty_n : IN STD_LOGIC;
    l_bStr2_read : OUT STD_LOGIC;
    l_dataB_0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    l_dataB_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    l_dataB_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    l_dataB_0_full_n : IN STD_LOGIC;
    l_dataB_0_write : OUT STD_LOGIC;
    l_dataA_0_din : OUT STD_LOGIC_VECTOR (33 downto 0);
    l_dataA_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    l_dataA_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    l_dataA_0_full_n : IN STD_LOGIC;
    l_dataA_0_write : OUT STD_LOGIC;
    l_dataA_1_din : OUT STD_LOGIC_VECTOR (33 downto 0);
    l_dataA_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    l_dataA_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    l_dataA_1_full_n : IN STD_LOGIC;
    l_dataA_1_write : OUT STD_LOGIC;
    l_Tb_m_Sreg_Array_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    l_Tb_m_Sreg_Array_1_ce0 : OUT STD_LOGIC;
    l_Tb_m_Sreg_Array_1_we0 : OUT STD_LOGIC;
    l_Tb_m_Sreg_Array_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    l_Tb_m_Sreg_Array_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    l_Tb_m_Sreg_Array_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    l_Tb_m_Sreg_Array_ce0 : OUT STD_LOGIC;
    l_Tb_m_Sreg_Array_we0 : OUT STD_LOGIC;
    l_Tb_m_Sreg_Array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    l_Tb_m_Sreg_Array_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cemit_replaced_systolicArray_Pipeline_VITIS_LOOP_247_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal p_Result_1_fu_132_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal l_aStr1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal l_bStr2_blk_n : STD_LOGIC;
    signal l_dataB_0_blk_n : STD_LOGIC;
    signal l_dataA_0_blk_n : STD_LOGIC;
    signal l_dataA_1_blk_n : STD_LOGIC;
    signal p_Repl2_s_reg_121 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_reg_239 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal l_val_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_4_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_val_2_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_2_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_3_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bitcast_ln110_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln110_1_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_1_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_247 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cemit_replaced_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cemit_replaced_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    p_Repl2_s_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_247)) then 
                    p_Repl2_s_reg_121 <= p_Result_s_reg_255;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    p_Repl2_s_reg_121 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                l_val_2_reg_260 <= l_val_2_fu_164_p1;
                l_val_3_reg_265 <= l_bStr2_dout(63 downto 32);
                l_val_4_reg_250 <= l_aStr1_dout(65 downto 34);
                l_val_reg_245 <= l_aStr1_dout(33 downto 2);
                p_Result_1_reg_239 <= p_Result_1_fu_132_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_s_reg_255 <= l_aStr1_dout(1 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, l_aStr1_empty_n, l_bStr2_empty_n, l_dataB_0_full_n, l_dataA_0_full_n, l_dataA_1_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((l_dataA_1_full_n = ap_const_logic_0) or (l_dataA_0_full_n = ap_const_logic_0) or (l_dataB_0_full_n = ap_const_logic_0))) or ((ap_start_int = ap_const_logic_1) and ((l_bStr2_empty_n = ap_const_logic_0) or (l_aStr1_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, l_aStr1_empty_n, l_bStr2_empty_n, l_dataB_0_full_n, l_dataA_0_full_n, l_dataA_1_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((l_dataA_1_full_n = ap_const_logic_0) or (l_dataA_0_full_n = ap_const_logic_0) or (l_dataB_0_full_n = ap_const_logic_0))) or ((ap_start_int = ap_const_logic_1) and ((l_bStr2_empty_n = ap_const_logic_0) or (l_aStr1_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, l_aStr1_empty_n, l_bStr2_empty_n, l_dataB_0_full_n, l_dataA_0_full_n, l_dataA_1_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((l_dataA_1_full_n = ap_const_logic_0) or (l_dataA_0_full_n = ap_const_logic_0) or (l_dataB_0_full_n = ap_const_logic_0))) or ((ap_start_int = ap_const_logic_1) and ((l_bStr2_empty_n = ap_const_logic_0) or (l_aStr1_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(l_aStr1_empty_n, l_bStr2_empty_n)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((l_bStr2_empty_n = ap_const_logic_0) or (l_aStr1_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(l_dataB_0_full_n, l_dataA_0_full_n, l_dataA_1_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((l_dataA_1_full_n = ap_const_logic_0) or (l_dataA_0_full_n = ap_const_logic_0) or (l_dataB_0_full_n = ap_const_logic_0));
    end process;


    ap_condition_247_assign_proc : process(ap_enable_reg_pp0_iter1, p_Result_1_reg_239, ap_block_pp0_stage0_11001)
    begin
                ap_condition_247 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (p_Result_1_reg_239 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, p_Result_1_fu_132_p1, ap_start_int)
    begin
        if (((p_Result_1_fu_132_p1 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln110_1_fu_181_p1 <= l_val_3_reg_265;
    bitcast_ln110_fu_178_p1 <= l_val_2_reg_260;
    l_Tb_m_Sreg_Array_1_address0 <= ap_const_lv64_1(1 - 1 downto 0);

    l_Tb_m_Sreg_Array_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_Tb_m_Sreg_Array_1_ce0 <= ap_const_logic_1;
        else 
            l_Tb_m_Sreg_Array_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l_Tb_m_Sreg_Array_1_d0 <= bitcast_ln110_1_fu_181_p1;

    l_Tb_m_Sreg_Array_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_Tb_m_Sreg_Array_1_we0 <= ap_const_logic_1;
        else 
            l_Tb_m_Sreg_Array_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    l_Tb_m_Sreg_Array_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    l_Tb_m_Sreg_Array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_Tb_m_Sreg_Array_ce0 <= ap_const_logic_1;
        else 
            l_Tb_m_Sreg_Array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l_Tb_m_Sreg_Array_d0 <= bitcast_ln110_fu_178_p1;

    l_Tb_m_Sreg_Array_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_Tb_m_Sreg_Array_we0 <= ap_const_logic_1;
        else 
            l_Tb_m_Sreg_Array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l_aStr1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, l_aStr1_empty_n, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_aStr1_blk_n <= l_aStr1_empty_n;
        else 
            l_aStr1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    l_aStr1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_aStr1_read <= ap_const_logic_1;
        else 
            l_aStr1_read <= ap_const_logic_0;
        end if; 
    end process;


    l_bStr2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, l_bStr2_empty_n, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_bStr2_blk_n <= l_bStr2_empty_n;
        else 
            l_bStr2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    l_bStr2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_bStr2_read <= ap_const_logic_1;
        else 
            l_bStr2_read <= ap_const_logic_0;
        end if; 
    end process;


    l_dataA_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, l_dataA_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_dataA_0_blk_n <= l_dataA_0_full_n;
        else 
            l_dataA_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l_dataA_0_din <= ((l_val_reg_245 & p_Repl2_s_reg_121) & p_Result_1_reg_239);

    l_dataA_0_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_dataA_0_write <= ap_const_logic_1;
        else 
            l_dataA_0_write <= ap_const_logic_0;
        end if; 
    end process;


    l_dataA_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, l_dataA_1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_dataA_1_blk_n <= l_dataA_1_full_n;
        else 
            l_dataA_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l_dataA_1_din <= ((l_val_4_reg_250 & p_Repl2_s_reg_121) & p_Result_1_reg_239);

    l_dataA_1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_dataA_1_write <= ap_const_logic_1;
        else 
            l_dataA_1_write <= ap_const_logic_0;
        end if; 
    end process;


    l_dataB_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, l_dataB_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_dataB_0_blk_n <= l_dataB_0_full_n;
        else 
            l_dataB_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l_dataB_0_din <= (l_val_V_1_fu_208_p1 & l_val_V_fu_204_p1);

    l_dataB_0_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_dataB_0_write <= ap_const_logic_1;
        else 
            l_dataB_0_write <= ap_const_logic_0;
        end if; 
    end process;

    l_val_2_fu_164_p1 <= l_bStr2_dout(32 - 1 downto 0);
    l_val_V_1_fu_208_p1 <= l_Tb_m_Sreg_Array_1_q0;
    l_val_V_fu_204_p1 <= l_Tb_m_Sreg_Array_q0;
    p_Result_1_fu_132_p1 <= l_aStr1_dout(1 - 1 downto 0);
end behav;
